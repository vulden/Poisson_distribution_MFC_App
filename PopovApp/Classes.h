#pragma once

/*******************************************************************************
 * 
 * \author Владимир Попов <popov99vlad@gmail.com>
 *	\version 1.0
 *	\date Май 2020 года
 *
 * \section Описание:
 *
 * Программа позволяет:
 * 1) Моделировать распределение Пуассона двумя разными методами моделирования.
 * 2) Определять распределения p-values для гипотез H0 и H1 (которые могут быть заданы путём ввода параметров).
 * 3) Показывать зависимость времени моделирования выборки заданного объёма от параметра для разных методов моделирования.
 *
 *******************************************************************************/

//! Абстрактный класс Sample.
/*! Моделирует распределения Пуассона, хранит выборку и её размер.
*/
class Sample {
protected:
	//! Целочисленный массив.
	/*! Хранит выборку. */
	int* samp;							
	//! Целочисленная переменная.
	/*! Xранит размер выборки. */
	int sampSize;						
public:
	int GetSampAt(int);
	int GetSampSize();
	//! Конструктор.
	/*! Выделяет память для выборки заданного размера. 
	 *\param sampsize Размер выборки.
	 */
	Sample(int sampsize);
	//! Виртуальная функция.
	/*! Создает выборку экспоненциальным методом с заданным параметром.
	 *\param lambda Параметр распределения Пуассона.
	 */
	virtual void Simulate(double lambda) = 0;
	//! Виртуальная функция.
	/*! Возвращает название метода моделирования. */
	virtual char* GetName() = 0;    
	//! Деструктор.
	/*! Освобождает память, занятую под хранение выборки. */
	~Sample();                      
};

//! Класс Sample_1.
/*! Моделирует распределения Пуассона методом обратной функции, хранит выборку и её размер.
 *  Является наследником Sample.
*/
class Sample_1 : public Sample {
public:
	//! Конструктор.
	/*! Выделяет память для выборки заданного размера.
	 *\param sampsize Размер выборки.
	 */
	Sample_1(int sampsize);
	//! Переопределенная функция.
	/*! Создает выборку экспоненциальным методом с заданным параметром.
	 *\param lambda Параметр распределения Пуассона.
	 */
	void Simulate(double lambda)override;
	//! Переопределенная функция.
	/*! Возвращает название метода моделирования. */
	char* GetName()override { return "Poisson Inverse Sequential"; }
	//! Деструктор.
	/*! Освобождает память, занятую под хранение выборки. */
	~Sample_1() {};
};

//! Класс Sample_2.
/*! Моделирует распределения Пуассона экспоненциальным методом, хранит выборку и её размер.
 *  Является наследником Sample.
 */
class Sample_2 : public Sample {
public:
	//! Конструктор.
	/*! Выделяет память для выборки заданного размера.
	 *\param sampsize Размер выборки.
	 */
	Sample_2(int sampsize);
	//! Переопределенная функция.
	/*! Создает выборку экспоненциальным методом с заданным параметром. 
	 *\param lambda Параметр распределения Пуассона.
	 */
	void Simulate(double lambda)override;
	//! Переопределенная функция.
	/*! Возвращает название метода моделирования. */
	char* GetName()override { return "Poisson Exponential"; }
	//! Деструктор.
	/*! Освобождает память, занятую под хранение выборки. */
	~Sample_2() {};
};

//! Класс Distribution.
/*! Считает вероятности распределения Пуассона, хранит вероятности и параметры.
*/
class Distribution {
private:
	//! Вещественная переменная.
	/*! Хранит параметр распределения.*/
	double lambda;
	//! Массив вещественных чисел.
	/*! Хранит ожидаемые вероятности. */
	double* expProb;
	//! Целочисленная переменная.
	/*! Хранит размер массива частот.*/
	int Freqsize;
public:
	double GetExpProbAt(int);
	double GetLambda();
	void SetLambda(double);
	int GetFreqsize();
	//! Конструктор.
	/*! Выделяет память для массива вероятностей и заполняет вероятностями. 
	 *\param lambda -- параметр распределения Пуассона.
	 */
	Distribution(double lambda);
	//! Деструктор.
	/*! Освобождает память, занятую под хранение вероятностей. */
	~Distribution();
};

//! Класс ChiSq.
/*! Преобразует выборку и массив ожидаемых вероятностей в массивы частот.
 *  Позволяет считать p-value.
 */
class ChiSq
{
private:
	//! Вещественная переменная.
	/*! Хранит статистику критерия хи-квадрат.*/
	double xi;
	//! Целочисленная переменная.
	/*! Xранит число степеней свободы. */
	int df;
	//! Вещественная переменная.
	/*! Хранит значение p-value.*/
	double pvalue;
	//! Целочисленная переменная.
	/*! Хранит размер массива частот.*/
	int Freqsize;
	//! Массив целых чисел.
	/*! Хранит полученные частоты. */
	int* obsFreq;
	//! Массив вещественных чисел.
	/*! Хранит ожидаемые частоты. */
	double* expFreq;
public:
	double GetPvalue();
	double GetExpFreqAt(int);
	int GetObsFreqAt(int);
	int GetFreqsize();
	//! Конструктор.
	/*! Выделяет память для массивов частот и заполняет их, формируя частоты из выборки и ожидаемых вероятностей.
	 *\param D Указатель на класс ожидаемых вероятностей.
	 *\param S Указатель на класс выборки.
	 */
	ChiSq(Distribution* D, Sample* S);
	//! Функция, принимает на вход указатель на класс Sample.
	/*! Заполняет массив полученных вероятностей заданными из выборки S.
	 *\param S Указатель на класс выборки.
	 */
	void Update(Sample* S);
	//! Функция.
	/*! Подсчитывает p-value. */
	void calculatePvalue();
	//! Деструктор.
	/*! Освобождает память, занятую под хранение частот. */
	~ChiSq();
};



